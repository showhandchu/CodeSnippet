var userid = _spPageContextInfo.userId;
var userDisplayName = _spPageContextInfo.userDisplayName;//e.g., xxx, xxxxx
var userLoginName = _spPageContextInfo.userLoginName;//xxxxx.xxx@xxxx.com

//People picker, parameter 1 is div id
function initializePeoplePicker(peoplePickerElementId, isMultiple) {
    var schema = {};
    schema['PrincipalAccountType'] = 'User,DL,SecGroup,SPGroup';//,DL,SecGroup,SPGroup  
    schema['SearchPrincipalSource'] = 15;
    schema['ResolvePrincipalSource'] = 15;
    schema['AllowMultipleValues'] = isMultiple;
    schema['MaximumEntitySuggestions'] = 50;
    schema['Width'] = '480px';
    this.SPClientPeoplePicker_InitStandaloneControlWrapper(peoplePickerElementId, null, schema);
}

//Get user value from people picker
function GetIdFromPeoplePicker(divId) {
    if ($("#" + divId + "_TopSpan_HiddenInput").val() != "") {
        var peopleData = JSON.parse($("#" + divId + "_TopSpan_HiddenInput").val());
        for (var i = 0; i < peopleData.length; i++) {
            var key = peopleData[i].Key;
            //key value ,ex:i:0#.f|membership|xxxxx.xxx@xxxx.com
        }
    }
}

//Get user id from email address
// username should be passed as email address
function GetUserId(userName) {
    var prefix = "i:0#.f|membership|";
    /// get the site url
    var siteUrl = _spPageContextInfo.siteAbsoluteUrl;
    var accountName = prefix + userName;

    $.ajax({
        url: siteUrl + "/_api/web/siteusers(@v)?@v='" + 
            encodeURIComponent(accountName) + "'",
        method: "GET",
        headers: { "Accept": "application/json; odata=verbose" },
        success: function (data) {
            console.info(data);
        },
        error: function (data) {
            console.log(JSON.stringify(data));
        }
    });
}

//another way to get user id
var username="xxx, xxxxx";
var requestUri = _spPageContextInfo.webAbsoluteUrl+"/_api/web/SiteUserInfoList/items?$select=Id,Title,Office&$filter=Title eq '"+username+"'";
//execute AJAX request
$.ajax({
    url: requestUri,
    type: "GET",
    headers: { "ACCEPT": "application/json;odata=verbose" },
    success: function (data) {
        console.info(data);
    },
    error: function () {
        //alert("Failed to get details");
    }
});

//Create list item
$.ajax({
    // _spPageContextInfo.webAbsoluteUrl - will give absolute URL of the site where you are running the code.
    url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getByTitle('" + listName + "')/items",
    type: "POST",
    headers:
    {
        // Accept header: Specifies the format for response data from the server.
        "Accept": "application/json;odata=verbose",
        //Content-Type header: Specifies the format of the data that the client is sending to the server
        "Content-Type": "application/json;odata=verbose",
        // X-RequestDigest header: When you send a POST request, it must include the form digest value in X-RequestDigest header
        "X-RequestDigest": $("#__REQUESTDIGEST").val()
    },
    data: JSON.stringify(data),
    success: function (data, status, xhr) {
        console.log("Success");
        //startUpload(data.d.Id);
    },
    error: function (xhr, status, error) {
        //loadingEnd();
        console.info(xhr);
        var errJson = JSON.parse(xhr.responseText);
        console.info(errJson);
        ShowErrorDialogCore("Warning", errJson.error.message.value, null);
    }
});
  
//Update list item
$.ajax({
    url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getByTitle('" + listName + "')/items(" + id + ")",
    type: "POST",
    headers:
    {
        // Accept header: Specifies the format for response data from the server.
        "Accept": "application/json;odata=verbose",
        //Content-Type header: Specifies the format of the data that the client is sending to the server
        "Content-Type": "application/json;odata=verbose",
        // IF-MATCH header: Provides a way to verify that the object being changed has not been changed since it was last retrieved.
        // "IF-MATCH":"*", will overwrite any modification in the object, since it was last retrieved.
        "IF-MATCH": "*",
        //X-HTTP-Method:  The MERGE method updates only the properties of the entity , while the PUT method replaces the existing entity with a new one that you supply in the body of the POST
        "X-HTTP-Method": "MERGE",
        // X-RequestDigest header: When you send a POST request, it must include the form digest value in X-RequestDigest header
        "X-RequestDigest": $("#__REQUESTDIGEST").val()
    },
    data: JSON.stringify(data)
});

//Upload file to list item
function uploadFile(ID, file) {
    var getFileBuffer = function (file) {

        var deferred = $.Deferred();
        var reader = new FileReader();

        reader.onload = function (e) {
            deferred.resolve(e.target.result);
        }
        reader.onerror = function (e) {
            deferred.reject(e.target.error);
        }
        reader.readAsArrayBuffer(file);
        return deferred.promise();
    };

    getFileBuffer(file).then(function (buffer) {
        $.ajax({
            url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getbytitle('" + listName + "')/items(" + ID + ")/AttachmentFiles/add(FileName='" + file.name + "')",
            method: 'POST',
            async: false,
            data: buffer,
            processData: false,
            headers: {
                "Accept": "application/json; odata=verbose",
                "content-type": "application/json; odata=verbose",
                "X-RequestDigest": document.getElementById("__REQUESTDIGEST").value

            }, success: onAttachmentSucess

        });

    });
    function onAttachmentSucess() {
        fileUploadeCount++;
        if (arraycount == fileUploadeCount) {
            console.log('uploaded successfully');
            returnToIndex();
        }
    }
}

//Delete file
function DeleteItemAttachment(ItemId, FileTitle) {
    var Dfd = $.Deferred();
    var Url = _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/GetByTitle('" + listName + "')/GetItemById(" + ItemId + ")/AttachmentFiles/getByFileName('" + FileTitle + "')  ";
    $.ajax({
        url: Url,
        type: 'DELETE',
        contentType: 'application/json;odata=verbose',
        headers: {
            'X-RequestDigest': $('#__REQUESTDIGEST').val(),
            'X-HTTP-Method': 'DELETE',
            'Accept': 'application/json;odata=verbose'
        },
        success: function (data) {
            console.info(data);
            Dfd.resolve(data);
        },
        error: function (error) {
            console.info(error);
            Dfd.reject(JSON.stringify(error));
        }
    });
    return Dfd.promise();
}

//Display file 
function listAttachmentById(id) {
    $("#files_place").empty();
    $.ajax({
        url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getbytitle('" + listName + "')/items(" + id + ")/AttachmentFiles",
        method: "GET",
        headers: { "Accept": "application/json; odata=verbose" },
        success: function (data) {
            $.each(data.d.results, function () {
                uploadedFileName.push(this.FileName);
                $("#files_place").append('<div class="uploaded_image"><img class="delete-file" item-id="' + id + '" title="Click here to delete the file." alt="Click here to delete the file." style="cursor: hand;border:none;vertical-align:middle;margin-right:1px;" src="/_layouts/15/inc/ipfsfileattachmentdelete.png?rev=k8gGqtz18Fkdf5pRLXlvMDuaCmr71WlNu2ftQlxwlzlC8RBAnw9Ml6zEojroWncb%2BrQ2LK%2BXHTrNHUy227HTjQ%3D%3D" data-themekey="#"><span class="filename"><a href="' + this.ServerRelativeUrl + '">' + this.FileName + '</a></span></div>');
            })
            if (currentItem["SubmitVerify"] == "true") {
                $(".delete-file").hide();
            }
        },
        error: function (data) {
            //ShowErrorDialogCore("Warning", errJson.error.message.value, null);
        }
    });
}

//Check in group
function checkGroup(currentGroup) {
    var result = false;
    if (currentGroup != null) {
        $().SPServices({
            operation: "GetGroupCollectionFromUser",
            userLoginName: $().SPServices.SPGetCurrentUser(),
            async: false,
            completefunc: function (xData, Status) {
                //console.info(xData.responseXML);
                var query = $(xData.responseXML).find("Group[Name='" + currentGroup.trim() + "']");
                //console.info(query);
                if (query.length == 0) {
                    result = false;
                } else {
                    result = true;
                }
            }
        });
    }
    return result;
}

//XML query
var caml = '<OrderBy><FieldRef Name="ID" Ascending="FALSE"/></OrderBy><Where><Eq><FieldRef Name="Creator"/><Value Type="Text">' + userDisplayName + '</Value></Eq></Where>';
var viewXml = '<View><Query>' + queryText + '</Query></View>';
var url = webUrl + "/_api/web/lists/getbytitle('" + listTitle + "')/getitems";
var queryPayload = {
    'query': {
        '__metadata': { 'type': 'SP.CamlQuery' },
        'ViewXml': viewXml
    }
};
header = null;
method = "POST";
headers = headers || {};
headers["Accept"] = "application/json;odata=verbose";
if (method == "POST") {
    headers["X-RequestDigest"] = $("#__REQUESTDIGEST").val();
}
var ajaxOptions =
{
    url: url,
    type: method,
    contentType: "application/json;odata=verbose",
    headers: headers
};
if (typeof payload != 'undefined') {
    ajaxOptions.data = JSON.stringify(payload);
}
return $.ajax(ajaxOptions);

//Send Email
var receiversObj = 'xxxxx.xxx@xxxx.com';
//MailBody = '<p>Hello ,<p> <p>This is for test.</p><p>Thanks</p>';
//MailSubject = 'New email notitication have been send by automaticaly';
var taMailBody = {
    properties: {
        __metadata: { 'type': 'SP.Utilities.EmailProperties' },
        //From: "",
        To: { 'results': [receiversObj] },
        Subject: mailSubject,
        Body: mailBody
    }
};

$.ajax({
    contentType: 'application/json',
    url: _spPageContextInfo.webAbsoluteUrl + "/_api/SP.Utilities.Utility.SendEmail",
    type: "POST",
    data: JSON.stringify(taMailBody),
    headers: {
        "Accept": "application/json;odata=verbose",
        "content-type": "application/json;odata=verbose",
        "X-RequestDigest": $("#__REQUESTDIGEST").val()
    },
    success: function (data) {
        console.log("Success");
    },
    error: function (data) {

        console.log("Error: " + JSON.stringify(data));
    }
});

//get  work flow
function GetWorkflows(itemId) {
    return $.ajax({
        url: _spPageContextInfo.webAbsoluteUrl + "/_api/SP.WorkflowServices.WorkflowInstanceService.Current/EnumerateInstancesForListItem(listId='" + listId + "',itemId='" + itemId + "')",
        method: "POST",
        headers: {
            "Accept": "application/json;odata=verbose",
            "content-type": "application/json;odata=verbose",
            "X-RequestDigest": $("#__REQUESTDIGEST").val(),
        },
        success: function (data) {
            
        },
        error: function (data) {

            console.log("GetWorkflows Error: " + JSON.stringify(data));
        }
    });
}

//start work flow
function StartWorkflow(itemId) {
    return $.ajax({
        url: _spPageContextInfo.webAbsoluteUrl + "/_api/SP.WorkflowServices.WorkflowInstanceService.Current/StartWorkflowOnListItemBySubscriptionId(subscriptionId='" + itemCreateWorkFlowSubscriptionId + "',itemId='" + itemId + "')",
        method: "POST",
        headers: {
            "Accept": "application/json;odata=verbose",
            "content-type": "application/json;odata=verbose",
            "X-RequestDigest": $("#__REQUESTDIGEST").val(),
            "X-HTTP-Method": "POST",
            "If-Match": "*",
            "X-Http-Method": "MERGE"
        },
        success: function (data) {

        },
        error: function (data) {

            console.log("StartWorkflow Error: " + JSON.stringify(data));
        }
    });
}
